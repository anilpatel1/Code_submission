class Solution {
public:
    int numMagicSquaresInside(vector<vector<int>>& grid) {
         if (grid.size() < 3 || grid[0].size() < 3) return 0;
        vector<vector<int>> magicSquares = {
            {8, 1, 6, 3, 5, 7, 4, 9, 2},
            {6, 1, 8, 7, 5, 3, 2, 9, 4},
            {4, 9, 2, 3, 5, 7, 8, 1, 6},
            {2, 9, 4, 7, 5, 3, 6, 1, 8},
            {8, 3, 4, 1, 5, 9, 6, 7, 2},
            {4, 3, 8, 9, 5, 1, 2, 7, 6},
            {6, 7, 2, 1, 5, 9, 8, 3, 4},
            {2, 7, 6, 9, 5, 1, 4, 3, 8}
        };    
        int count = 0;
        for (int r = 0; r <= grid.size() - 3; ++r) {
            for (int c = 0; c <= grid[0].size() - 3; ++c) {
                vector<int> square;
                for (int i = 0; i < 3; ++i) {
                    for (int j = 0; j < 3; ++j) {
                        square.push_back(grid[r + i][c + j]);
                    }
                }
                for (const auto& magic : magicSquares) {
                    if (square == magic) {
                        ++count;
                        break;
                    }
                }
            }
        }
        return count;
    }
};
