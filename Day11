class Solution {
public:
    string reorganizeString(string s) {
         int n = s.length();
        vector<int> count(26, 0);
        for (char c : s) {
            count[c - 'a']++;
        }
        int maxCount = *max_element(count.begin(), count.end());
        int maxChar = max_element(count.begin(), count.end()) - count.begin();
        if (maxCount > (n + 1) / 2) return "";
        
        string res(n, ' ');
        int idx = 0;

        while (count[maxChar] > 0) {
            res[idx] = 'a' + maxChar;
            idx += 2;
            count[maxChar]--;
        }
        for (int i = 0; i < 26; i++) {
            while (count[i] > 0) {
                if (idx >= n) idx = 1;
                res[idx] = 'a' + i;
                idx += 2;
                count[i]--;
            }
        }
        
        return res;
    }
};
class Solution {
public:
    string longestPalindrome(string s) {
        if (s.empty()) return "";
        int n = s.size();
        int start = 0, maxLen = 1;
        
        for (int i = 0; i < n; ++i) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);  
            int len = max(len1, len2);
            if (len > maxLen) {
                maxLen = len;
                start = i - (len - 1) / 2;
            }
        }
        return s.substr(start, maxLen);
    }
private:
    int expandAroundCenter(const string& s, int left, int right) {
        while (left >= 0 && right < s.size() && s[left] == s[right]) {
            --left;
            ++right;
        }
        return right - left - 1;
    }
};
