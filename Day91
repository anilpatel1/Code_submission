class Solution {
public:
    int PivotIndex(vector<int>& arr){
        int n = arr.size();
        int s=0,e=n-1;
        while(s<=e){
            int mid = s+(e-s)/2;
            if(s==e){
                return s;
            }
            if(mid>0  && arr[mid]<arr[mid-1]){
                return mid-1;
            }
            else if(mid+1<n && arr[mid]>arr[mid+1]){
                return mid;
            }
            else if(arr[s]<=arr[mid]){
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
        return -1;
    }
    int binarySearch(vector<int>&nums,int s,int e,int target){
        while(s<=e){
            int mid=s+(e-s)/2;
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid]<target){
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int pivotIndex= PivotIndex(nums);
        int n = nums.size();
        int s=0,e=n-1;
        int ans=-1;

        if(target>=nums[0] && target<=nums[pivotIndex]){
            ans = binarySearch(nums,0,pivotIndex,target);
        }
        else{
            ans = binarySearch(nums,pivotIndex+1,n-1,target);
        }
        return ans;
    }
};
        // int n=nums.size();
        // int s=0,e=n-1;
        // while(s<=e){
        //     int mid=s+(e-s)/2;
        //     if(nums[mid]==target){
        //         return mid;
        //     }
        //     if (nums[s] <= nums[mid]) {
        //         if (nums[s] <= target && target < nums[mid]) {
        //             e = mid - 1;
        //         } else {
        //             s = mid + 1;
        //         }
        //     }
        //     else if(nums[mid]<target && target <= nums[e]){
        //         s=mid+1;
        //     }
        //     else{
        //         e=mid-1;
        //     }
        // }
        // return -1;
