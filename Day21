//Design Neighbor Sum Service
class neighborSum {
    private:
    vector<vector<int>> grid;
    unordered_map<int, pair<int, int>> valuePositionMap;

public:
    neighborSum(vector<vector<int>>& grid) : grid(grid) {
        int n = grid.size();
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                valuePositionMap[grid[i][j]] = {i, j};
            }
        }
    }
    int adjacentSum(int value) {
        int sum = 0;
        if (valuePositionMap.find(value) == valuePositionMap.end()) return sum;
        auto [x, y] = valuePositionMap[value];
        vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        for (auto [dx, dy] : directions) {
            int newX = x + dx;
            int newY = y + dy;
            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid[0].size()) {
                sum += grid[newX][newY];
            }
        }
        return sum;
    }
    int diagonalSum(int value) {
        int sum = 0;
        if (valuePositionMap.find(value) == valuePositionMap.end()) return sum;
        auto [x, y] = valuePositionMap[value];
        vector<pair<int, int>> directions = {{-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        
        for (auto [dx, dy] : directions) {
            int newX = x + dx;
            int newY = y + dy;
            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid[0].size()) {
                sum += grid[newX][newY];
            }
        }
        return sum;
    }
};
//Shortest Distance After Road Addition Queries I
class Solution {
public:
    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {
        vector<vector<pair<int, int>>> graph(n);
        for (int i = 0; i < n - 1; ++i) {
            graph[i].emplace_back(i + 1, 1);
        }
        vector<int> answer;
        for (auto& query : queries) {
            int u = query[0];
            int v = query[1];
            graph[u].emplace_back(v, 1);
            vector<int> dist(n, numeric_limits<int>::max());
            priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
            
            dist[0] = 0;
            pq.emplace(0, 0);
            
            while (!pq.empty()) {
                int d = pq.top().first;
                int node = pq.top().second;
                pq.pop();
                
                if (d > dist[node]) continue;
                
                for (auto& edge : graph[node]) {
                    int next_node = edge.first;
                    int weight = edge.second;
                    
                    if (dist[node] + weight < dist[next_node]) {
                        dist[next_node] = dist[node] + weight;
                        pq.emplace(dist[next_node], next_node);
                    }
                }
            }   
            answer.push_back(dist[n - 1]);
        }  
        return answer;
    }
};
