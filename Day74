#include<iostream>
using namespace std;
class ListNode{
    public:
    int val;
    ListNode* next;

    ListNode(int x) : val(x), next(NULL) {}  // Constructor to initialize a new node
};
void print(ListNode* head) {
        ListNode* temp = head;
        while(temp != NULL) {
                cout << temp->val << "->";
                temp = temp->next;
        }
}
ListNode *detectCycle(ListNode *head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast != NULL){
            fast = fast->next;
            if(fast != NULL){
                fast = fast->next;
                slow = slow->next;
            }
            if(fast==slow){
                break;
            }
            if(fast==NULL){
                return NULL;
            }
        }

        slow = head;
        while(fast != slow){
                slow = slow->next;
                fast = fast->next;
        }
        
        ListNode* temp = fast;
        while(temp->next != slow){
            temp = temp->next;
        }
        temp->next = NULL;
        return slow;
}
int main(){
    ListNode* head = new ListNode(1);
    ListNode* tail = head;
    for(int i=2;i<=6;i++){
        tail->next = new ListNode(i);
        tail = tail->next;
    }
    
    tail->next = head->next->next;
    ListNode* ans = detectCycle(head);
    if(ans){
        cout<<"cycle Detect at : "<<ans->val<<endl;
    }
    else{
        cout<<"cycle Not detect"<<endl;
    }
}
