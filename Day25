class Solution {
public:
    int minFlips(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        auto flipsToMakeRowPalindromic = [&](vector<int>& row) -> int {
            int flips = 0;
            int size = row.size();
            for (int i = 0; i < size / 2; ++i) {
                if (row[i] != row[size - i - 1]) {
                    flips++;
                }
            }
            return flips;
        };
        auto flipsToMakeColumnPalindromic = [&](vector<vector<int>>& grid, int col) -> int {
            int flips = 0;
            for (int i = 0; i < m / 2; ++i) {
                if (grid[i][col] != grid[m - i - 1][col]) {
                    flips++;
                }
            }
            return flips;
        };
        int rowFlips = 0;
        for (int i = 0; i < m; ++i) {
            rowFlips += flipsToMakeRowPalindromic(grid[i]);
        }
        int columnFlips = 0;
        for (int j = 0; j < n; ++j) {
            columnFlips += flipsToMakeColumnPalindromic(grid, j);
        }
        return min(rowFlips, columnFlips);
    }
};
