lass Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        map<string, vector<string> >mp;
        for(auto str:strs){
            string s = str;
            sort(s.begin(),s.end());
            mp[s].push_back(str);
        }
        vector<vector<string>>ans;
        for(auto it=mp.begin();it!=mp.end();it++){
            ans.push_back(it->second);
        }
        return ans;
    }
};

class Solution {
public:
bool isPalindrome(string&s,int i, int j){
    while(i<j){
        if(s[i]!=s[j]){
            return false;
        }
        i++,j--;
    }
    return true;
}
    string longestPalindrome(string s) {
        string ans ="";
        for(int i=0;i<s.size();i++){
            for(int j=i;j<s.size();j++){
                if(isPalindrome(s,i,j)){
                    string t = s.substr(i,j-i+1);
                    ans = t.size() > ans.size() ? t: ans; 
                }
            }
        }
        return ans;
    }

};
